#include <xinu.h>
#include <stdio.h>

/* Variaveis globais para status dos componentes */
volatile int esteira_ligada = 0;
volatile int servo_motor_ativo = 0;
volatile int led_status_esteira = 0;    // LED da esteira
volatile int led_fruto_bom = 0;        // LED do fruto bom
volatile int led_fruto_ruim = 0;       // LED do fruto ruim
char status_fruto[10] = "N/A";
volatile int sistema_ativo = 1;
volatile int frutos_aprovados = 0;      // Contador de frutos aprovados
volatile int frutos_reprovados = 0;     // Contador de frutos reprovados
volatile int histograma[10] = {0};     // Histograma de qualidade de frutos

/* Simulacao de GPIO */
#define PINO_LED_ESTEIRA    0
#define PINO_LED_BOM        1
#define PINO_LED_RUIM       2
#define PINO_LED_ANALISE    3
#define PINO_SERVO_MOTOR    4
#define PINO_ESTEIRA_MOTOR  5

volatile int gpio_pinos[6]; // Simula os estados dos pinos

/* Mutex e semaforos para sincronizacao */
sid32 mutex;
sid32 sem_analise_cor;
sid32 sem_analise_volume;
sid32 sem_analise_pragas;
sid32 sem_analise_completa;

/* Prototipos das funcoes */
void esteira();
void analise_fruto();
void transporte_para_bom();
void servo_motor();
void monitorar_botoes();
void finalizar_sistema();
void inicializar_gpio();
void set_gpio(int pino, int estado);
int get_gpio(int pino);
void copia_string(char *dest, const char *src);
int compara_string(const char *str1, const char *str2);
int get_input();
void exibir_estatisticas();
void analise_cor();
void analise_volume();
void analise_pragas();

/* Funcao principal */
process main(void) {
    mutex = semcreate(1);
    sem_analise_cor = semcreate(0);
    sem_analise_volume = semcreate(0);
    sem_analise_pragas = semcreate(0);
    sem_analise_completa = semcreate(0);

    inicializar_gpio();

    printf("\n========================\n");
    printf("[ %ds] Sistema iniciado.\n", clktime);
    printf("========================\n");
    printf("Digite '1' para processar um fruto ou '0' para desligar o sistema.\n");

    /* Criando thread para monitorar o sistema */
    resume(create(monitorar_botoes, 1024, 20, "BotaoMonitor", 0));

    return OK;
}


/* Monitoramento dos botoes */
void monitorar_botoes() {
    int input;

    while (sistema_ativo) {
        input = get_input();

        if (input == 0) {
            finalizar_sistema();
            break;
        } else if (input == 1) {
            resume(create(esteira, 1024, 20, "Esteira", 0));
        }
    }
}

/* Funcao para simular o motor da esteira */
void esteira() {
    int tempo;

    while (sistema_ativo) {
        wait(mutex);
        esteira_ligada = 1;
        set_gpio(PINO_LED_ESTEIRA, 1); // Liga o LED da esteira
        set_gpio(PINO_ESTEIRA_MOTOR, 1); // Liga o motor da esteira
        printf("[ %ds] Esteira iniciada. Transportando fruto...\n", clktime);
        signal(mutex);

        for (tempo = 0; tempo < 6; tempo++) {
            sleep(1); // Simula um segundo por iteracao
            printf("[ %ds] Tempo na esteira: %d segundo(s)\n", clktime, tempo + 1);
        }

        wait(mutex);
        esteira_ligada = 0;
        set_gpio(PINO_LED_ESTEIRA, 0); // Desliga o LED da esteira
        set_gpio(PINO_ESTEIRA_MOTOR, 0); // Desliga o motor da esteira
        printf("[ %ds] Esteira parada. Fruto chegou a posicao de analise.\n", clktime);
        signal(mutex);

        printf("\n");

        /* Inicia a analise do fruto */
        resume(create(analise_fruto, 1024, 20, "Analise", 0));
        break;
    }
}

/* Funcao para simular a analise do fruto */
void analise_fruto() {
    wait(mutex);
    printf("[ %ds] Iniciando a analise do fruto...\n", clktime);
    set_gpio(PINO_LED_ANALISE, 1); // Liga o LED de analise
    sleep(2); // Simula 2 segundos para começar analise

    /* Cria processos para cada tipo de analise */
    resume(create(analise_cor, 1024, 20, "AnaliseCor", 0));
    resume(create(analise_volume, 1024, 20, "AnaliseVolume", 0));
    resume(create(analise_pragas, 1024, 20, "AnalisePragas", 0));

    /* Aguarda a conclusao das tres analises */
    wait(sem_analise_cor);
    wait(sem_analise_volume);
    wait(sem_analise_pragas);

    /* Marca que todas as análises foram concluídas */
    signal(sem_analise_completa);

    int qualidade = clktime % 10; // Valor pseudo-aleatorio baseado no tempo
    histograma[qualidade]++; // Atualiza o histograma
    printf("[ %ds] Valor de qualidade do fruto: %d\n", clktime, qualidade);

    sleep(2); // Simula 2 segundo para finalizar a analise

    signal(mutex);

    if (qualidade >= 6) {
        copia_string(status_fruto, "Aprovado");
        set_gpio(PINO_LED_BOM, 1); // Liga o LED do fruto bom
        set_gpio(PINO_LED_RUIM, 0); // Desliga o LED do fruto ruim
        frutos_aprovados++;
        printf("[ %ds] Fruto analisado: APROVADO.\n", clktime);

        /* Continua o transporte para o recipiente de bons frutos */
        resume(create(transporte_para_bom, 1024, 20, "TransporteBom", 0));
    } else {
        copia_string(status_fruto, "Reprovado");
        set_gpio(PINO_LED_BOM, 0); // Desliga o LED do fruto bom
        set_gpio(PINO_LED_RUIM, 1); // Liga o LED do fruto ruim
        frutos_reprovados++;
        printf("[ %ds] Fruto analisado: REPROVADO.\n", clktime);
        resume(create(servo_motor, 1024, 20, "Servo", 0));
    }
    
    set_gpio(PINO_LED_ESTEIRA, 0); // Desliga o LED de analise
}

/* Analise de cor */
void analise_cor() {
    printf("[ %ds] Analisando cor...\n", clktime);
    sleep(3); // Simula 3 segundos de analise
    printf("[ %ds] Analise de cor concluida.\n", clktime);
    signal(sem_analise_cor);
}

/* Analise de volume */
void analise_volume() {
    printf("[ %ds] Analisando volume...\n", clktime);
    sleep(7); // Simula 7 segundos de analise
    printf("[ %ds] Analise de volume concluida.\n", clktime);
    printf("\n");
    signal(sem_analise_volume);
}

/* Analise de pragas */
void analise_pragas() {
    printf("[ %ds] Analisando pragas...\n", clktime);
    sleep(5); // Simula 5 segundos de analise
    printf("[ %ds] Analise de pragas concluida.\n", clktime);
    signal(sem_analise_pragas);
}

/* Transporte do fruto aprovado */
void transporte_para_bom() {
    wait(mutex);
    printf("\n");
    printf("[ %ds] Esteira transportando fruto para o recipiente de bons frutos...\n", clktime);
    set_gpio(PINO_LED_ESTEIRA, 1); // Liga o LED da esteira
    set_gpio(PINO_ESTEIRA_MOTOR, 1); // Liga o motor da esteira
    esteira_ligada = 1;
    signal(mutex);
    int tempo;
    for (tempo = 0; tempo < 3; tempo++) {
        sleep(1);
        printf("[ %ds] Tempo de transporte: %d segundo(s)\n", clktime, tempo + 1);
    }

    wait(mutex);
    printf("[ %ds] Fruto aprovado foi depositado no recipiente de bons frutos.\n\n", clktime);
    set_gpio(PINO_LED_ESTEIRA, 0); // Desliga o LED da esteira
    set_gpio(PINO_ESTEIRA_MOTOR, 0); // Desliga o motor da esteira
    esteira_ligada = 0;
    signal(mutex);
    
    printf("[ %ds] Digite '1' para processar outro fruto ou '0' para desligar o sistema.\n", clktime);
}

/* Simula o servo motor */
void servo_motor() {
    wait(mutex);
    printf("\n");
    if (compara_string(status_fruto, "Reprovado") == 0) {
        set_gpio(PINO_SERVO_MOTOR, 1); // Ativa o servo motor
        servo_motor_ativo = 1;
        printf("[ %ds] Servo motor ativado para descarte do fruto.\n", clktime);
        sleep(2);
        servo_motor_ativo = 0;
        printf("[ %ds] Servo motor desativado apos descarte do fruto.\n\n", clktime);
        set_gpio(PINO_SERVO_MOTOR, 0); // Desativa o servo motor
    }
    signal(mutex);
    printf("[ %ds] Digite '1' para processar outro fruto ou '0' para desligar o sistema.\n", clktime);
}

/* Finaliza o sistema */
void finalizar_sistema() {
    wait(mutex);
    sistema_ativo = 0;
    esteira_ligada = 0;
    servo_motor_ativo = 0;
    set_gpio(PINO_LED_ESTEIRA, 0);
    set_gpio(PINO_LED_BOM, 0);
    set_gpio(PINO_LED_RUIM, 0);
    copia_string(status_fruto, "N/A");

    exibir_estatisticas();

    printf("\n========================================\n");
    printf("[ %ds] Sistema desligado.\n", clktime);
    printf("========================================\n");
    signal(mutex);
}

/* Exibe estatisticas */
void exibir_estatisticas() {
    printf("\n========================================\n");
    printf("[ %ds] Estatisticas do sistema:\n", clktime);
    printf("========================================\n");
    printf("Total de Frutos Processados: %d\n", frutos_aprovados + frutos_reprovados);
    printf("Frutos Aprovados: %d\n", frutos_aprovados);
    printf("Frutos Reprovados: %d\n", frutos_reprovados);
    

    printf("\nHistograma de Qualidade dos Frutos (0-9):\n");
    int i;
    for (i = 0; i < 10; i++) {
        printf("%d: ", i);
        int j;
        for (j = 0; j < histograma[i]; j++) {
            printf("*");
        }
        printf(" (%d)\n", histograma[i]);
    }
}

/* Inicializa os pinos GPIO */
void inicializar_gpio() {
    int i;
    for (i = 0; i < 6; i++) {
        gpio_pinos[i] = 0;
    }
}

/* Define o estado de um pino GPIO */
void set_gpio(int pino, int estado) {
    gpio_pinos[pino] = estado;
}

/* Obtem o estado de um pino GPIO */
int get_gpio(int pino) {
    return gpio_pinos[pino];
}

/* Implementacao da funcao strcpy */
void copia_string(char *dest, const char *src) {
    int i = 0;
    while (src[i] != '\0') {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
}

/* Implementacao da funcao strcmp */
int compara_string(const char *str1, const char *str2) {
    int i = 0;
    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i]) {
            return str1[i] - str2[i];
        }
        i++;
    }
    return str1[i] - str2[i];
}

/* Funcao para obter a entrada do usuario (simples) */
int get_input() {
    char input[10];
    int i = 0;
    char ch;

    /* Limpa o buffer */
    for (i = 0; i < 10; i++) {
        input[i] = '\0';
    }

    /* Le o valor do console ate encontrar um caractere de nova linha */
    int bytes_lidos = read(0, input, sizeof(input) - 1);

    if (bytes_lidos > 0) {
        input[bytes_lidos] = '\0'; // Adiciona o caractere nulo ao final da string

        if (input[0] == '0') {
            return 0;
        } else if (input[0] == '1') {
            return 1;
        }
    }

    return -1;
}