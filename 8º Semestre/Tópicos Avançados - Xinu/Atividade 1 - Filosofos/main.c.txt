/* Exercicio 1 - Jantar dos filosofos */ 

#include <xinu.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX_REFICOES 3  // Definindo o número máximo de refeições
#define NUM_FILOSOFOS 5

sid32 output_sem;                 // Semáforo para saída do printf

sid32 garfo_sem[NUM_FILOSOFOS];  // Semáforos para controle dos garfos
sid32 mutex;                      // Mutex para controle de acesso

enum {
	PENSANDO,
	FAMINTO,
	JANTANDO
} estados[NUM_FILOSOFOS]; // Estados dos filósofos

int refeicoes_contadas[NUM_FILOSOFOS]; // Contador de refeições para cada filósofo

/* Função para verificar se um filósofo pode jantar */ 
void verificar(int id) {
    if (estados[id] == FAMINTO && 
        estados[(id + 4) % NUM_FILOSOFOS] != JANTANDO && 
        estados[(id + 1) % NUM_FILOSOFOS] != JANTANDO) {
        
        estados[id] = JANTANDO; // Muda o estado para JANTANDO
        signal(garfo_sem[id]); // Permite que o filósofo jante
    }
}

/* Função para o filósofo pegar os garfos */ 
void pegar_garfos(int id) {
    wait(mutex); // Entra na região crítica
    estados[id] = FAMINTO; // Muda o estado para FAMINTO

    wait(output_sem); 
    printf("Filosofo %d estado: Faminto.\n", id+1);
    signal(output_sem);

    verificar(id); // Tenta pegar os garfos
    signal(mutex); // Sai da região crítica
    wait(garfo_sem[id]); // Espera até que possa jantar

    wait(output_sem);
    printf("Filosofo %d estado: Pegou garfos.\n", id+1); // Feedback ao pegar os garfos
    signal(output_sem);
}

/* Função para o filósofo soltar os garfos */ 
void soltar_garfos(int id) {
    wait(mutex); // Entra na região crítica
    estados[id] = PENSANDO; // Muda o estado para PENSANDO

    wait(output_sem);
    printf("Filosofo %d estado: Pensando.\n", id+1);
    signal(output_sem);

    verificar((id + 4) % NUM_FILOSOFOS); // Testa o filósofo da esquerda
    verificar((id + 1) % NUM_FILOSOFOS); // Testa o filósofo da direita

    wait(output_sem);
    printf("Filosofo %d estado: Soltou garfos\n", id+1); // Feedback ao soltar os garfos
    signal(output_sem);

    signal(mutex); // Sai da região crítica
}

/* Função principal de cada filósofo */ 
void filosofo(int id) {
    while (refeicoes_contadas[id] < MAX_REFICOES) { // Continua até o limite de refeições
        wait(output_sem);
        printf("Filosofo %d estado: Pensando.\n", id+1);
        signal(output_sem);

        sleep(rand() % 3 + 1); // Tempo de pensamento aleatório
        pegar_garfos(id); // Tenta pegar os garfos

        wait(output_sem); 
        printf("Filosofo %d estado: Jantando.\n", id+1);
        signal(output_sem); 
        
        sleep(rand() % 2 + 1); // Tempo de jantar aleatório
        soltar_garfos(id); // Solta os garfos após jantar

        refeicoes_contadas[id]++; // Incrementa o contador de refeições
    }

    // Mensagem de finalização para o filósofo
    wait(output_sem);
    printf("Filosofo %d terminou suas refeições.\n", id+1);
    signal(output_sem);
}

int main(void) {
    int i;

    mutex = semcreate(1);         
    output_sem = semcreate(1);     
    for (i = 0; i < NUM_FILOSOFOS; i++) {
        garfo_sem[i] = semcreate(0); 
        estados[i] = PENSANDO;         
        refeicoes_contadas[i] = 0; // Inicializa contador de refeições
    }

    // Cria processos para cada filósofo
    for (i = 0; i < NUM_FILOSOFOS; i++) {
        resume(create(filosofo, 1024, 20, "filosofo", 1, i));
    }

    // Loop para monitorar se todos os filósofos terminaram
    while (1) {
        sleep(1);
        int total_refeicoes = 0;
        for (i = 0; i < NUM_FILOSOFOS; i++) {
            total_refeicoes += refeicoes_contadas[i];
        }
        // Verifica se todos os filósofos terminaram suas refeições
        if (total_refeicoes >= NUM_FILOSOFOS * MAX_REFICOES) {
            break; // Sai do loop se todos terminaram
        }
    }

    // Mensagem de encerramento do programa
    wait(output_sem);
    printf("Todos os filósofos completaram suas refeições. Encerrando o programa.\n");
    signal(output_sem);

    return 0;
}